bash -c '
<%= %{export http_proxy="#{knife_config[:bootstrap_proxy]}"} if knife_config[:bootstrap_proxy] -%>

export hostname="<%= @config[:chef_node_name] %>"
export webui_password="<%= ENV['WEBUI_PASSWORD'] %>"
export amqp_password="<%= ENV['AMQP_PASSWORD'] %>"

export PATH=/usr/local/bin:$PATH

set -e

setup() {
  yum update -y
  platform="$(cat /etc/redhat-release | cut -d" " -f1 | tr [[:upper:]] [[:lower:]])"
  platform_version="$(cat /etc/redhat-release | cut -d" " -f3)"
}

set_hostname_for_centos() {
  if hostname | grep -q "$hostname" >/dev/null ; then
    printf "Hostname is correct, so skipping...\n"
    return
  fi

  local host_first="$(echo $hostname | cut -d . -f 1)"
  local hostnames="${hostname} ${host_first}"

  sed -i "s/HOSTNAME=.*/HOSTNAME=${hostname}/" /etc/sysconfig/network

  if egrep -q "^127.0.1.1[[:space:]]" /etc/hosts >/dev/null ; then
    sed -i "s/^\(127[.]0[.]1[.]1[[:space:]]\+\)/\1${hostnames} /" \
      /etc/hosts
  else
    sed -i "s/^\(127[.]0[.]0[.]1[[:space:]]\+.*\)$/\1\n127.0.1.1 ${hostnames} /" \
      /etc/hosts
  fi
  /bin/hostname ${hostname}
}

config_chef_solo() {
  local tmp_solo="$1"

  mkdir -p $tmp_solo
  cat <<SOLO_RB > $tmp_solo/solo.rb
file_cache_path "$tmp_solo"
cookbook_path   "$tmp_solo/cookbooks"
SOLO_RB

  cat<<BOOTSTRAP_JSON > $tmp_solo/bootstrap.json
{
  "chef_server": {
    "webui_enabled" : true,
    "ssl_req" : "/C=CA/ST=Several/L=Locality/O=Example/OU=Operations/CN=${hostname}/emailAddress=root@${hostname}"
  },
  "run_list": [ "recipe[chef-server::rubygems-install]", "recipe[chef-server::apache-proxy]" ]
}
BOOTSTRAP_JSON
}

install_chef_server() {
  local tmp_solo=/tmp/chef-solo

  config_chef_solo $tmp_solo

  chef-solo -c $tmp_solo/solo.rb -j $tmp_solo/bootstrap.json \
     -r http://s3.amazonaws.com/chef-solo/bootstrap-latest.tar.gz

  rm -rf $tmp_solo
}

setup
set_hostname_for_${platform}
config_chef_solo
install_chef_server

printf -- "-----> Bootstraping Chef Server on ${hostname} is complete.\n"
'
