{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"An Opscode Chef knife plugin to manage Chef Servers","body":"[![Build Status](https://secure.travis-ci.org/fnichol/knife-server.png?branch=master)](http://travis-ci.org/fnichol/knife-server) [![Dependency Status](https://gemnasium.com/fnichol/knife-server.png)](https://gemnasium.com/fnichol/knife-server) [![Code Climate](https://codeclimate.com/badge.png)](https://codeclimate.com/github/fnichol/knife-server)\r\n\r\nAn Opscode Chef knife plugin to manage Chef Servers. Bootstrap a new Chef\r\nServer on Amazon's EC2 or a standalone server. Backup and restore your Chef\r\nServer or Hosted Chef's node, role, data bag, and environment JSON data.\r\n\r\n## <a name=\"usage\"></a> Usage\r\n\r\nFollow the [installation](#installation) instructions, then you are ready\r\nto create your very own Chef Server running Ubuntu on Amazon's EC2 service:\r\n\r\n```bash\r\n$ knife server bootstrap ec2 --ssh-user ubuntu \\\r\n  --node-name chefapalooza.example.com\r\n```\r\n\r\nOr maybe you want to try out a Chef Server using [Vagrant][vagrant_site]?\r\n\r\n```bash\r\n$ cat <<VAGRANTFILE > Vagrantfile\r\nVagrant::Config.run do |config|\r\n  config.vm.box = \"precise64\"\r\n  config.vm.box_url = \"http://files.vagrantup.com/precise64.box\"\r\n  config.vm.network :hostonly, \"192.168.33.11\"\r\n  config.vm.customize [\"modifyvm\", :id, \"--memory\", 2048]\r\nend\r\nVAGRANTFILE\r\n$ vagrant up\r\n$ knife server bootstrap standalone --ssh-user vagrant \\\r\n  --node-name chefapalooza.example.com --host 192.168.33.11\r\n```\r\n\r\nTaking a backup of all node, role, data bag, and environment data is also a\r\nsnap:\r\n\r\n```bash\r\n$ knife server backup\r\n```\r\n\r\nRestoring all that data isn't too hard either:\r\n\r\n```bash\r\n$ knife server restore\r\n```\r\n\r\nLet's say you have all your roles, environments, and data bags in a Git\r\nrepository (remember, Infrastructure as Code) and you want to build a\r\nnew Chef Server. Try this:\r\n\r\n```bash\r\n$ knife server backup nodes --backup-dir /tmp/old_server\r\n$ knife server bootstrap ec2 --ssh-user ubuntu \\\r\n  --node-name chef.example.com\r\n$ knife server restore nodes --backup-dir /tmp/old_server\r\n```\r\n\r\nNow fire up your cookbooks, roles, environments, and data bags. Good to go!\r\nWell except for old client keys on your nodes, but this is being looked into.\r\n\r\nSee [below](#subcommands) for more details.\r\n\r\n## <a name=\"installation\"></a> Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n```ruby\r\ngem 'knife-server'\r\n```\r\n\r\nAnd then execute:\r\n\r\n```bash\r\n$ bundle\r\n```\r\n\r\nOr install it yourself as:\r\n\r\n```bash\r\n$ gem install knife-server\r\n```\r\n\r\n### <a name=\"installation-knife\"></a> knife.rb Setup\r\n\r\nWhen creating a Chef Server the validation key and admin client key will\r\nbe installed on your workstation. Therefore, several knife configuration\r\noptions are required (descriptions courtesy of the [Chef wiki][wiki_knife]):\r\n\r\n* `node_name`: User or client identity (i.e., name) to use for authenticating\r\n  requests to the Chef Server.\r\n* `client_key`: Private key file to authenticate to the Chef server.\r\n  Corresponds to the -k or --key option\r\n* `validation_key`: Specifies the private key file to use when bootstrapping\r\n  new hosts. See knife-client(1) for more information about the validation\r\n  client.\r\n\r\nFor example:\r\n\r\n```ruby\r\nnode_name       \"gramsay\"\r\nclient_key      \"#{ENV['HOME']}/.chef.d/gramsay.pem\"\r\nvalidation_key  \"#{ENV['HOME']}/.chef.d/chef-validator.pem\"\r\n```\r\n\r\nMost options can be passed to the knife subcommands explicitly but this\r\nquickly becomes tiring, repetitive, and error-prone. A better solution is to\r\nadd some of the common configuration to your `~/.chef/knife.rb` or your\r\nprojects `.chef/knife.rb` file like so:\r\n\r\n```ruby\r\nknife[:aws_access_key_id] = \"MY_KEY\"\r\nknife[:aws_secret_access_key] = \"MY_SECRET\"\r\nknife[:region] = \"us-west-2\"\r\nknife[:availability_zone] = \"us-west-2a\"\r\nknife[:flavor] = \"t1.micro\"\r\n```\r\n\r\nBetter yet, why not try a more generic [knife.rb][chef_bootstrap_knife_rb] file\r\nfrom the [chef-bootstrap-repo][chef_bootstrap_repo] project?\r\n\r\n## <a name=\"subcommands\"></a> Subcommands\r\n\r\n### <a name=\"knife-server-bootstrap\"></a> knife server bootstrap (Common Options)\r\n\r\nThese subcommands will install and configure an Open Source Chef Server on\r\nseveral different clouds/environments. The high level step taken are as\r\nfollows:\r\n\r\n1. Provision or use a node and install the Chef Server software fronted by\r\n   an Apache2 instance handling SSL for the API port (TCP/443) and the\r\n   WebUI web application (TCP/444).\r\n2. Fetch the validation key from the server and install it onto the\r\n   workstation issuing the knife subcommand. The validation key will be\r\n   installed at the path defined in the knife `validation_key` variable.\r\n   If a key already exists at that path a backup copy will be made in the\r\n   same directory.\r\n3. Create an initial admin client key called `root` in the root user's account\r\n   on the server which can be used for local administration of the Chef\r\n   Server.\r\n4. Create an admin client key with the name defined in the knife\r\n   `node_name` configuration variable and install it onto the workstation\r\n   issuing the knife subcommand. The client key will be installed at the\r\n   path defined in the knife `client_key` configuration variable. If a key\r\n   already exists at that path a backup copy will be made in the same\r\n   directory.\r\n\r\n**Note** `knife server bootstrap` can not be invoked directly; a subcommand\r\nmust be selected which determines the provisioning strategy.\r\n\r\n#### Common Configuration\r\n\r\n##### --node-name NAME (-N)\r\n\r\nThe name of your new Chef Server. The hostname of the system will be set to\r\nthis value and the self signed SSL certificate will use this value as its CN.\r\nIdeally this will correspond to the A or CNAME DNS record.\r\n\r\nThis option is **required**.\r\n\r\n##### --platform PLATFORM (-P)\r\n\r\nThe platform type that will be bootstrapped. By convention a bootstrap\r\ntemplate of `chef-server-#{platform}.erb` will be searched for in the\r\ntemplate lookup locations (gems, .chef directory, etc.).\r\n\r\nThe default value is `\"debian\"` which support Debian and Ubuntu platforms.\r\n\r\n##### --ssh-user USER (-x)\r\n\r\nThe SSH username used when bootstrapping the Chef Server node. Note that the\r\nsome Amazon Machine Images (AMIs) such as the official Canonical Ubuntu images\r\nuse non-root SSH users (`\"ubuntu\"` for Ubuntu AMIs).\r\n\r\nThe default value is `\"root\"`.\r\n\r\n##### --ssh-port PORT (-p)\r\n\r\nThe SSH port used when bootstrapping the Chef Server node.\r\n\r\nThe default value is `\"22\"`.\r\n\r\n##### --identity-file IDENTITY\\_FILE (-i)\r\n\r\nThe SSH identity file used for authentication.\r\n\r\n##### --prerelease\r\n\r\nInstalls a pre-release Chef gem rather than a stable release version.\r\n\r\n##### --bootstrap-version VERSION\r\n\r\nThe version of Chef to install.\r\n\r\n##### --template-file TEMPLATE\r\n\r\nThe full path to location of template to use.\r\n\r\n##### --distro DISTRO (-d)\r\n\r\nBootstraps the Chef Server using a particular bootstrap template.\r\n\r\nThe default is `\"chef-server-#{platform}\"`.\r\n\r\n##### --webui-password PASSWORD\r\n\r\nThe initial password for the WebUI admin account.\r\n\r\nThe default value is `\"chefchef\"`.\r\n\r\n##### --amqp-password PASSWORD\r\n\r\nThe initial password for AMQP.\r\n\r\nThe default value is `\"chefchef\"`.\r\n\r\n### <a name=\"knife-server-bootstrap-ec2\"></a> knife server bootstrap ec2\r\n\r\nProvisions an EC2 instance on the Amazon Web Services (AWS) cloud and sets\r\nup an Open Source Chef Server as described [above](#knife-server-bootstrap).\r\nIn addition, the following steps are taken initially:\r\n\r\n1. Create and configure an EC2 Security Group called **\"infrastructure\"** for\r\n   the Chef Server instance. TCP ports 22, 443, and 444 are permitted inbound\r\n   for SSH, the API endpoint, and the WebUI web application respectively.\r\n2. An EC2 instance will be provisioned using configuration and/or defaults\r\n   present using the [knife-ec2][knife-ec2] plugin.\r\n\r\n#### Configuration\r\n\r\n##### --aws-access-key-id KEY (-A)\r\n\r\nYour AWS access key ID.\r\n\r\nThis option is **required**.\r\n\r\n##### --aws-secret-access-key SECRET (-K)\r\n\r\nYour AWS API secret access key.\r\n\r\nThis option is **required**.\r\n\r\n##### --region REGION\r\n\r\nThe desired AWS region, such as `\"us-east-1\"` or `\"us-west-2\"`.\r\n\r\nThe default value is `\"us-east-1\"` but is strongly encouraged to be set\r\nexplicitly.\r\n\r\n##### --ssh-key KEY (-S)\r\n\r\nThe AWS SSH key id.\r\n\r\n##### --flavor FLAVOR (-f)\r\n\r\nThe flavor of EC2 instance (m1.small, m1.medium, etc).\r\n\r\nThe default value is `\"m1.small\"`.\r\n\r\n##### --image IMAGE (-I)\r\n\r\nThe AMI for the EC2 instance.\r\n\r\n##### --availability-zone ZONE (-Z)\r\n\r\nThe availability zone for the EC2 instance.\r\n\r\nThe default value is `\"us-east-1b\"`.\r\n\r\n##### --groups X,Y,Z (-G)\r\n\r\nThe security groups for this EC2 instance.\r\n\r\nThe default value is `\"infrastructure\"`.\r\n\r\n##### --tags T=V\\[,T=V,...\\] (-T)\r\n\r\nThe tags for this EC2 instance.\r\n\r\nThe resulting set will include:\r\n\r\n* `\"Node=#{config[:chef_node_name]}\"`\r\n* `\"Role=chef_server\"`\r\n\r\n##### --ebs-size SIZE\r\n\r\nThe size of the EBS volume in GB, for EBS-backed instances.\r\n\r\n##### --ebs-no-delete-on-term\r\n\r\nDo not delete EBS volumn on instance termination.\r\n\r\n### <a name=\"knife-server-bootstrap-standalone\"></a> knife server bootstrap standalone\r\nProvisions a standalone server that is reachable on the network and sets up\r\nan Open Source Chef Server as described [above](#knife-server-bootstrap). You\r\nare responsible for providing the server so it could be a physical machine,\r\nVagrant VM with host-only or bridged networking, or a cloud server instance\r\nwith a known IP address or host name.\r\n\r\n#### Configuration\r\n\r\n##### --host FQDN_OR_IP (-H)\r\n\r\nHost name or IP address of the host to bootstrap.\r\n\r\nThis option is **required**.\r\n\r\n##### --ssh-password PASSWORD (-P)\r\n\r\nThe SSH password used when bootstrapping the Chef Server node. If no password\r\nis provided but an SSH key-based authentication fails, then you will be\r\nprompted interactively for a password. In other words, if your server\r\nrequires password authentication you can skip this option and type it in after\r\nthe plugin starts.\r\n\r\n### <a name=\"knife-server-backup\"></a> knife server backup\r\n\r\nPulls Chef data primitives from a Chef Server as JSON for backup. Backups can\r\nbe taken of:\r\n\r\n* nodes\r\n* roles\r\n* environments\r\n* data bags\r\n\r\nA big thanks to [Steven Danna][stevendanna] and [Joshua Timberman][jtimberman]\r\nfor the [BackupExport][backup_export] knife plugin which was the inspiration\r\nfor this implementation.\r\n\r\n#### Configuration\r\n\r\n##### COMPONENT[ COMPONENT ...]\r\n\r\nThe following component types are valid:\r\n\r\n* `nodes`\r\n* `roles`\r\n* `environments`\r\n* `data_bags` (note the underscore character)\r\n\r\nWhen no component types are specified, all will be selected for backup.\r\nThis is equivalent to invoking:\r\n\r\n```bash\r\n$ knife server backup nodes roles environments data_bags\r\n```\r\n\r\n##### --backup-dir DIR (-D)\r\n\r\nThe directory to host backup files. A sub-directory for each data primitive\r\ntype will be created. For example if the `backup-dir` was `/backups/chef`\r\nthen all all node JSON representations would be written to\r\n`/backups/chef/nodes` and data bag JSON representations would be written to\r\n`/backups/chef/data_bags`.\r\n\r\nThe default uses the `:file_backup_path` configuration option, the\r\n`:chef_server_url` and the current time to construct a unique directory\r\n(within a second). For example, if the time was \"2012-04-01 08:47:11 UTC\", and\r\ngiven the following configuration (in **knife.rb**):\r\n\r\n```ruby\r\nfile_backup_path  = \"/var/chef/backups\"\r\nchef_server_url   = \"https://api.opscode.com/organizations/coolinc\"\r\n```\r\n\r\nthen a backup directory of\r\n`/var/chef/backups/api.opscode.com_20120401T084711-0000` would be created.\r\n\r\n### <a name=\"knife-server-restore\"></a> knife server restore\r\n\r\nRestores Chef data primitives from JSON backups to a Chef Server. You can\r\nrestore some or all of:\r\n\r\n* nodes\r\n* roles\r\n* environments\r\n* data bags\r\n\r\nA big thanks to [Steven Danna][stevendanna] and [Joshua Timberman][jtimberman]\r\nfor the [BackupRestore][backup_restore] knife plugin which was the inspiration\r\nfor this implementation.\r\n\r\n#### Configuration\r\n\r\n##### COMPONENT[ COMPONENT ...]\r\n\r\nThe following component types are valid:\r\n\r\n* `nodes`\r\n* `roles`\r\n* `environments`\r\n* `data_bags` (note the underscore character)\r\n\r\nWhen no component types are specified, all will be selected for restore.\r\nThis is equivalent to invoking:\r\n\r\n```bash\r\n$ knife server restore nodes roles environments data_bags \\\r\n  --backup-dir /my/backup/dir\r\n```\r\n\r\n##### --backup-dir DIR (-D)\r\n\r\nThe directory to containing backup JSON files. A sub-directory for each data\r\nprimitive type is expected (the `knife server backup` subcommand provides\r\nthis format).\r\n\r\nThis option is **required**.\r\n\r\n## <a name=\"roadmap\"></a> Roadmap\r\n\r\n* Support for other platforms (alternative bootstrap templates)\r\n* Support for Rackspace provisioning (use knife-rackspace gem)\r\n* knife server backup backed by s3 (fog api)\r\n* knife server restore from s3 archive (fog api)\r\n\r\n## <a name=\"development\"></a> Development\r\n\r\n* Source hosted at [GitHub][repo]\r\n* Report issues/questions/feature requests on [GitHub Issues][issues]\r\n\r\nPull requests are very welcome! Make sure your patches are well tested.\r\nIdeally create a topic branch for every separate change you make. For\r\nexample:\r\n\r\n1. Fork the repo\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Added some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n\r\n## <a name=\"authors\"></a> Authors\r\n\r\nCreated and maintained by [Fletcher Nichol][fnichol] (<fnichol@nichol.ca>)\r\n\r\n## <a name=\"license\"></a> License\r\n\r\nApache License, Version 2.0 (see [LICENSE][license])\r\n\r\n[license]:      https://github.com/fnichol/knife-server/blob/master/LICENSE\r\n[fnichol]:      https://github.com/fnichol\r\n[repo]:         https://github.com/fnichol/knife-server\r\n[issues]:       https://github.com/fnichol/knife-server/issues\r\n[contributors]: https://github.com/fnichol/knife-server/contributors\r\n\r\n[backup_export]:            https://github.com/stevendanna/knife-hacks/blob/master/plugins/backup_export.rb\r\n[backup_restore]:           https://github.com/stevendanna/knife-hacks/blob/master/plugins/backup_restore.rb\r\n[chef_bootstrap_knife_rb]:  https://github.com/fnichol/chef-bootstrap-repo/blob/master/.chef/knife.rb\r\n[chef_bootstrap_repo]:      https://github.com/fnichol/chef-bootstrap-repo/\r\n[jtimberman]:               https://github.com/jtimberman\r\n[knife-ec2]:                https://github.com/opscode/knife-ec2\r\n[stevendanna]:              https://github.com/stevendanna\r\n[vagrant_site]:             http://vagrantup.com/\r\n[wiki_knife]:               http://wiki.opscode.com/display/chef/Knife#Knife-Knifeconfiguration\r\n","name":"Knife::Server","google":"UA-29670723-1"}